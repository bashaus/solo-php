#!/usr/bin/env php
<?php

/**
 * solo (PHP Implementation)
 *
 * Prevents multiple cron instances from running simultaneously.
 * 
 * Copyright 2013 Bashkim Isai
 * http://www.bashkim.com.au/
 *
 * Based on the bash library by Timothy Kay
 * http://timkay.com/solo/
 *
 * Usage : bin/solo [port] [exec*]
 * Cron  : * * * * * bin/solo 24601 ./task.php arg1 arg2 arg3
 */

// Setup
ini_set('error_reporting', E_ALL ^ E_NOTICE);
ini_set('display_errors', 1);
set_time_limit(0);

// Get parameters
$params = $argv;
$solo = array_shift($params);
$port = array_shift($params);
$exec = implode(' ', $params);

// Check data
if (!$port || !is_numeric($port)) {
    echo "You must provide a port number" . PHP_EOL;
    echo "Usage: bin/solo [port] [exec*]" . PHP_EOL;
    exit(1);
}

// Set socket constants
define('SOCKET_ADDRESS' , '127.0.0.1');
define('SOCKET_PORT'    , $port);
define('SOCKET_TIMEOUT' , 5);

// Listen on the port (will exit with status 1 if already bound on port)
$socket = socket_create(AF_INET, SOCK_STREAM, 0);
@socket_bind($socket, SOCKET_ADDRESS, SOCKET_PORT) or exit(1);
socket_listen($socket);
socket_set_nonblock($socket);

// Run the process
$pipeSpec = array(
    0 => array('pipe', 'r'), // stdin
    1 => array('pipe', 'w'), // stdout
    2 => array('pipe', 'r')  // stderr
);

$process = proc_open($exec, $pipeSpec, $pipes);

if (is_resource($process)) {
    while ($process) {
        @socket_accept($socket);

        if (feof($pipes[1])) {
            break;
        }

        // Passthrough STDOUT and STDERR
        fwrite(STDOUT, fgets($pipes[1]));
        fwrite(STDERR, fgets($pipes[2]));
    }

    $return = proc_close($process);
}

// Cleanup
socket_close($socket);

exit($return);
